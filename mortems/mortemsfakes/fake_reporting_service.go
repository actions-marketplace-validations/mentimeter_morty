// Code generated by counterfeiter. DO NOT EDIT.
package mortemsfakes

import (
	"sync"
	"time"

	"github.com/mentimeter/morty/mortems"
)

type FakeReportingService struct {
	ReportDetectStub        func(time.Duration, string) error
	reportDetectMutex       sync.RWMutex
	reportDetectArgsForCall []struct {
		arg1 time.Duration
		arg2 string
	}
	reportDetectReturns struct {
		result1 error
	}
	reportDetectReturnsOnCall map[int]struct {
		result1 error
	}
	ReportDowntimeStub        func(time.Duration, string) error
	reportDowntimeMutex       sync.RWMutex
	reportDowntimeArgsForCall []struct {
		arg1 time.Duration
		arg2 string
	}
	reportDowntimeReturns struct {
		result1 error
	}
	reportDowntimeReturnsOnCall map[int]struct {
		result1 error
	}
	ReportResolveStub        func(time.Duration, string) error
	reportResolveMutex       sync.RWMutex
	reportResolveArgsForCall []struct {
		arg1 time.Duration
		arg2 string
	}
	reportResolveReturns struct {
		result1 error
	}
	reportResolveReturnsOnCall map[int]struct {
		result1 error
	}
	ReportSeverityStub        func(string) error
	reportSeverityMutex       sync.RWMutex
	reportSeverityArgsForCall []struct {
		arg1 string
	}
	reportSeverityReturns struct {
		result1 error
	}
	reportSeverityReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReportingService) ReportDetect(arg1 time.Duration, arg2 string) error {
	fake.reportDetectMutex.Lock()
	ret, specificReturn := fake.reportDetectReturnsOnCall[len(fake.reportDetectArgsForCall)]
	fake.reportDetectArgsForCall = append(fake.reportDetectArgsForCall, struct {
		arg1 time.Duration
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ReportDetect", []interface{}{arg1, arg2})
	fake.reportDetectMutex.Unlock()
	if fake.ReportDetectStub != nil {
		return fake.ReportDetectStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.reportDetectReturns
	return fakeReturns.result1
}

func (fake *FakeReportingService) ReportDetectCallCount() int {
	fake.reportDetectMutex.RLock()
	defer fake.reportDetectMutex.RUnlock()
	return len(fake.reportDetectArgsForCall)
}

func (fake *FakeReportingService) ReportDetectCalls(stub func(time.Duration, string) error) {
	fake.reportDetectMutex.Lock()
	defer fake.reportDetectMutex.Unlock()
	fake.ReportDetectStub = stub
}

func (fake *FakeReportingService) ReportDetectArgsForCall(i int) (time.Duration, string) {
	fake.reportDetectMutex.RLock()
	defer fake.reportDetectMutex.RUnlock()
	argsForCall := fake.reportDetectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReportingService) ReportDetectReturns(result1 error) {
	fake.reportDetectMutex.Lock()
	defer fake.reportDetectMutex.Unlock()
	fake.ReportDetectStub = nil
	fake.reportDetectReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReportingService) ReportDetectReturnsOnCall(i int, result1 error) {
	fake.reportDetectMutex.Lock()
	defer fake.reportDetectMutex.Unlock()
	fake.ReportDetectStub = nil
	if fake.reportDetectReturnsOnCall == nil {
		fake.reportDetectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.reportDetectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeReportingService) ReportDowntime(arg1 time.Duration, arg2 string) error {
	fake.reportDowntimeMutex.Lock()
	ret, specificReturn := fake.reportDowntimeReturnsOnCall[len(fake.reportDowntimeArgsForCall)]
	fake.reportDowntimeArgsForCall = append(fake.reportDowntimeArgsForCall, struct {
		arg1 time.Duration
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ReportDowntime", []interface{}{arg1, arg2})
	fake.reportDowntimeMutex.Unlock()
	if fake.ReportDowntimeStub != nil {
		return fake.ReportDowntimeStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.reportDowntimeReturns
	return fakeReturns.result1
}

func (fake *FakeReportingService) ReportDowntimeCallCount() int {
	fake.reportDowntimeMutex.RLock()
	defer fake.reportDowntimeMutex.RUnlock()
	return len(fake.reportDowntimeArgsForCall)
}

func (fake *FakeReportingService) ReportDowntimeCalls(stub func(time.Duration, string) error) {
	fake.reportDowntimeMutex.Lock()
	defer fake.reportDowntimeMutex.Unlock()
	fake.ReportDowntimeStub = stub
}

func (fake *FakeReportingService) ReportDowntimeArgsForCall(i int) (time.Duration, string) {
	fake.reportDowntimeMutex.RLock()
	defer fake.reportDowntimeMutex.RUnlock()
	argsForCall := fake.reportDowntimeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReportingService) ReportDowntimeReturns(result1 error) {
	fake.reportDowntimeMutex.Lock()
	defer fake.reportDowntimeMutex.Unlock()
	fake.ReportDowntimeStub = nil
	fake.reportDowntimeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReportingService) ReportDowntimeReturnsOnCall(i int, result1 error) {
	fake.reportDowntimeMutex.Lock()
	defer fake.reportDowntimeMutex.Unlock()
	fake.ReportDowntimeStub = nil
	if fake.reportDowntimeReturnsOnCall == nil {
		fake.reportDowntimeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.reportDowntimeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeReportingService) ReportResolve(arg1 time.Duration, arg2 string) error {
	fake.reportResolveMutex.Lock()
	ret, specificReturn := fake.reportResolveReturnsOnCall[len(fake.reportResolveArgsForCall)]
	fake.reportResolveArgsForCall = append(fake.reportResolveArgsForCall, struct {
		arg1 time.Duration
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ReportResolve", []interface{}{arg1, arg2})
	fake.reportResolveMutex.Unlock()
	if fake.ReportResolveStub != nil {
		return fake.ReportResolveStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.reportResolveReturns
	return fakeReturns.result1
}

func (fake *FakeReportingService) ReportResolveCallCount() int {
	fake.reportResolveMutex.RLock()
	defer fake.reportResolveMutex.RUnlock()
	return len(fake.reportResolveArgsForCall)
}

func (fake *FakeReportingService) ReportResolveCalls(stub func(time.Duration, string) error) {
	fake.reportResolveMutex.Lock()
	defer fake.reportResolveMutex.Unlock()
	fake.ReportResolveStub = stub
}

func (fake *FakeReportingService) ReportResolveArgsForCall(i int) (time.Duration, string) {
	fake.reportResolveMutex.RLock()
	defer fake.reportResolveMutex.RUnlock()
	argsForCall := fake.reportResolveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReportingService) ReportResolveReturns(result1 error) {
	fake.reportResolveMutex.Lock()
	defer fake.reportResolveMutex.Unlock()
	fake.ReportResolveStub = nil
	fake.reportResolveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReportingService) ReportResolveReturnsOnCall(i int, result1 error) {
	fake.reportResolveMutex.Lock()
	defer fake.reportResolveMutex.Unlock()
	fake.ReportResolveStub = nil
	if fake.reportResolveReturnsOnCall == nil {
		fake.reportResolveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.reportResolveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeReportingService) ReportSeverity(arg1 string) error {
	fake.reportSeverityMutex.Lock()
	ret, specificReturn := fake.reportSeverityReturnsOnCall[len(fake.reportSeverityArgsForCall)]
	fake.reportSeverityArgsForCall = append(fake.reportSeverityArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ReportSeverity", []interface{}{arg1})
	fake.reportSeverityMutex.Unlock()
	if fake.ReportSeverityStub != nil {
		return fake.ReportSeverityStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.reportSeverityReturns
	return fakeReturns.result1
}

func (fake *FakeReportingService) ReportSeverityCallCount() int {
	fake.reportSeverityMutex.RLock()
	defer fake.reportSeverityMutex.RUnlock()
	return len(fake.reportSeverityArgsForCall)
}

func (fake *FakeReportingService) ReportSeverityCalls(stub func(string) error) {
	fake.reportSeverityMutex.Lock()
	defer fake.reportSeverityMutex.Unlock()
	fake.ReportSeverityStub = stub
}

func (fake *FakeReportingService) ReportSeverityArgsForCall(i int) string {
	fake.reportSeverityMutex.RLock()
	defer fake.reportSeverityMutex.RUnlock()
	argsForCall := fake.reportSeverityArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReportingService) ReportSeverityReturns(result1 error) {
	fake.reportSeverityMutex.Lock()
	defer fake.reportSeverityMutex.Unlock()
	fake.ReportSeverityStub = nil
	fake.reportSeverityReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReportingService) ReportSeverityReturnsOnCall(i int, result1 error) {
	fake.reportSeverityMutex.Lock()
	defer fake.reportSeverityMutex.Unlock()
	fake.ReportSeverityStub = nil
	if fake.reportSeverityReturnsOnCall == nil {
		fake.reportSeverityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.reportSeverityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeReportingService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reportDetectMutex.RLock()
	defer fake.reportDetectMutex.RUnlock()
	fake.reportDowntimeMutex.RLock()
	defer fake.reportDowntimeMutex.RUnlock()
	fake.reportResolveMutex.RLock()
	defer fake.reportResolveMutex.RUnlock()
	fake.reportSeverityMutex.RLock()
	defer fake.reportSeverityMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReportingService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mortems.ReportingService = new(FakeReportingService)
