// Code generated by counterfeiter. DO NOT EDIT.
package mortemsfakes

import (
	"sync"

	"github.com/google/go-github/v32/github"
	"github.com/ostenbom/morty/mortems"
)

type FakeGitService struct {
	CommitNewBlobsStub        func([]*github.Blob) error
	commitNewBlobsMutex       sync.RWMutex
	commitNewBlobsArgsForCall []struct {
		arg1 []*github.Blob
	}
	commitNewBlobsReturns struct {
		result1 error
	}
	commitNewBlobsReturnsOnCall map[int]struct {
		result1 error
	}
	GetFilesStub        func() ([]*mortems.File, error)
	getFilesMutex       sync.RWMutex
	getFilesArgsForCall []struct {
	}
	getFilesReturns struct {
		result1 []*mortems.File
		result2 error
	}
	getFilesReturnsOnCall map[int]struct {
		result1 []*mortems.File
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGitService) CommitNewBlobs(arg1 []*github.Blob) error {
	var arg1Copy []*github.Blob
	if arg1 != nil {
		arg1Copy = make([]*github.Blob, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.commitNewBlobsMutex.Lock()
	ret, specificReturn := fake.commitNewBlobsReturnsOnCall[len(fake.commitNewBlobsArgsForCall)]
	fake.commitNewBlobsArgsForCall = append(fake.commitNewBlobsArgsForCall, struct {
		arg1 []*github.Blob
	}{arg1Copy})
	fake.recordInvocation("CommitNewBlobs", []interface{}{arg1Copy})
	fake.commitNewBlobsMutex.Unlock()
	if fake.CommitNewBlobsStub != nil {
		return fake.CommitNewBlobsStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.commitNewBlobsReturns
	return fakeReturns.result1
}

func (fake *FakeGitService) CommitNewBlobsCallCount() int {
	fake.commitNewBlobsMutex.RLock()
	defer fake.commitNewBlobsMutex.RUnlock()
	return len(fake.commitNewBlobsArgsForCall)
}

func (fake *FakeGitService) CommitNewBlobsCalls(stub func([]*github.Blob) error) {
	fake.commitNewBlobsMutex.Lock()
	defer fake.commitNewBlobsMutex.Unlock()
	fake.CommitNewBlobsStub = stub
}

func (fake *FakeGitService) CommitNewBlobsArgsForCall(i int) []*github.Blob {
	fake.commitNewBlobsMutex.RLock()
	defer fake.commitNewBlobsMutex.RUnlock()
	argsForCall := fake.commitNewBlobsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGitService) CommitNewBlobsReturns(result1 error) {
	fake.commitNewBlobsMutex.Lock()
	defer fake.commitNewBlobsMutex.Unlock()
	fake.CommitNewBlobsStub = nil
	fake.commitNewBlobsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitService) CommitNewBlobsReturnsOnCall(i int, result1 error) {
	fake.commitNewBlobsMutex.Lock()
	defer fake.commitNewBlobsMutex.Unlock()
	fake.CommitNewBlobsStub = nil
	if fake.commitNewBlobsReturnsOnCall == nil {
		fake.commitNewBlobsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.commitNewBlobsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGitService) GetFiles() ([]*mortems.File, error) {
	fake.getFilesMutex.Lock()
	ret, specificReturn := fake.getFilesReturnsOnCall[len(fake.getFilesArgsForCall)]
	fake.getFilesArgsForCall = append(fake.getFilesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetFiles", []interface{}{})
	fake.getFilesMutex.Unlock()
	if fake.GetFilesStub != nil {
		return fake.GetFilesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getFilesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGitService) GetFilesCallCount() int {
	fake.getFilesMutex.RLock()
	defer fake.getFilesMutex.RUnlock()
	return len(fake.getFilesArgsForCall)
}

func (fake *FakeGitService) GetFilesCalls(stub func() ([]*mortems.File, error)) {
	fake.getFilesMutex.Lock()
	defer fake.getFilesMutex.Unlock()
	fake.GetFilesStub = stub
}

func (fake *FakeGitService) GetFilesReturns(result1 []*mortems.File, result2 error) {
	fake.getFilesMutex.Lock()
	defer fake.getFilesMutex.Unlock()
	fake.GetFilesStub = nil
	fake.getFilesReturns = struct {
		result1 []*mortems.File
		result2 error
	}{result1, result2}
}

func (fake *FakeGitService) GetFilesReturnsOnCall(i int, result1 []*mortems.File, result2 error) {
	fake.getFilesMutex.Lock()
	defer fake.getFilesMutex.Unlock()
	fake.GetFilesStub = nil
	if fake.getFilesReturnsOnCall == nil {
		fake.getFilesReturnsOnCall = make(map[int]struct {
			result1 []*mortems.File
			result2 error
		})
	}
	fake.getFilesReturnsOnCall[i] = struct {
		result1 []*mortems.File
		result2 error
	}{result1, result2}
}

func (fake *FakeGitService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.commitNewBlobsMutex.RLock()
	defer fake.commitNewBlobsMutex.RUnlock()
	fake.getFilesMutex.RLock()
	defer fake.getFilesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGitService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mortems.GitService = new(FakeGitService)
